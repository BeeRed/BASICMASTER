comment 0000 see. BASIC MASTER MANUAL
comment 0000 hook for user NMI,IRQ,BREAK NMI,TIMER
label 0000 USRNMI
label 0002 USRIRQ
label 0004 BREAKV
label 0006 TIMERV
label 0008 RAMEND
label 0009 RAMEND+1
comment 000a 2^16 sec time counter
label 000a TIME1
label 000b TIME2
word  000a
comment 000c 1/60 sec time counter  (0..59)
label 000c TIME3
comment 000d if (TIME1,2)==(TIMER) jump to (TIMERV)
label 000d TIMEER
word  000d
comment 000f cursor position X,Y (0..39,0..23)
label 000f CURX
label 0010 CURY
comment 0011  if 0 do control, else display tile graphics char. after graphics char displayed, this flag clear.
label 0011 control_or_graphic_char
comment 0012 cursor blink 0:blink,other:not blink
label 0012 cursor_blink
comment 0013 NMI status F0:allow, 00:inhibit
label 0013 nmi_status
comment cursor character (ex. monitor:*, BASIC:_)
label 0014 cursor_char
commen 0015 save char on cursor position
label 0015 cursor_char_save
comment 0016 0:alpha, other:kana
label 0016 kana_shift
comment break point. address(2bytes) and save data(1byte)
label 0017 BREAK_POINT1
label 001A BREAK_POINT2
label 001D BREAK_POINT3
label 0020 BREAK_POINT4
label 0023 BREAK_POINT5
comment 0026 number of break point
label 0026 BREAK_POINT_NUM
data  0017-0026
comment hook for keyboard input / char display
label 0028 ASCIN
label 002b ASCOUT
comment 002e jump to mon_BYTIN
label 002e BYTIN
comment 0031 jump to mon_BYTOUT
label 0031 BYTOUT
label 0034 ASCOUT2
comment 0037 display size??
comment 0039 Save stack pointer on intterupt
label 0039 SAVESP
comment start/end address for record/load tape and memory transfer
label 003b ADRTOP
label 003c ADRTOP+1
label 003d ADREND
label 003e ADREND+1
comment start/end address for memory transfer destination
label 003F COPYTOP
label 0040 COPYTOP+1
label 0041 COPYEND
label 0042 COPYEND+1
char  0043-004a
comment tape file name 8byte
label 0043 FNAME
lcomment 0049 delimiter .
label 0049 FNAME+6
lcomment 0049 filename extension B or S
label 004a FNAME+7
comment 004b file attribute
lcomment 004b B:01, S:10
label 004b filetype
label 004c block number (BASIC save blocks)
char  004d-0054
comment 004d alter filename for compare/verify
label 004d FNAME2
comment 0055 Maximum character length to enter
label 0055 max_input_len
word  0055
label 0056 block_len
label 0057 tape_adrs_top
label 0058 tape_adrs_top+1
word  0057
comment working area for MOVBLK,INHEX4
label 0059 work_MOVBLK
comment 005a 00:compare, other:store
comment 005b Load work??
label 005c compare_or_store
comment 005c 00:load other:verify
label 005c load_or_verify
label 005d work_OUTIX
label 005e work_OUTIX+1
comment 0061 temporarily save IX register.
label 0061 save_IX
comment 0063 temporarily save IX register.
label 0063 save_IX2
comment 0069 char on cursor pos. 0:cursor, 1:original char.
#label 0069 cursor_status
label 0069 work_0069
comment 006a check keyboard pressed? released?
#label 006a keyboard_scan_status
label 006a work_006a
comment 006c keyboard scan bottom(0) to top(3)
#label 006c keyboard_scan_read_line
label 006c work_006c
comment 0071 drive keyboard scan columns left(0) to right(12)
#label 0071 keyboard_scan_drive_columns
label 0071 work_0071
word  006d
label 006d work_IX
label 006e work_IX+1
word  006f
label 006f save_IX
label 0070 save_IX+1
#
# 72-ff BASIC work area
#
comment 0072 72-ff Hitachi BASIC work area
word  00b5
label 00b5 M_save_IX
comment 00b7 MUSIC M transposition
label 00b7 M_transposition
comment 00c5 MUSIC Volume V1-5
label 00c5 M_volume
comment 00c6 MUSIC U/D
label 00c6 M_octove
comment 00c7 MUSIC P0-9
label 00c7 M_length
comment 00ca MUSIC Tempo T1-7
label 00ca M_tone
comment 00cb rest or music flag (00:rest)
label 00cb M_rest_or_music
comment 00cd current pitch of sound
comment 00cd D=1,E=3,F=5,G=7,A=9,B=11,C=13, sharp++, flat--
label 00cd M_sound
#
label 0100 text_vram
label 03ff text_vram_end
label 0400 basic_work
label 08ff basic_work_end
label 0a00 basic_text_start
#
# BASIC ROM
#
label b000 L2BASIC_ROM_start
label c000 L2BASIC_start
label d000 L1BASIC_start
#
# I/O area
#
comment e890 r/w charactor/background Color (MP-1710)
label   e890 io_tile_color
comment e891 r/w background color D2-0 (MP-1710)
label   e891 io_background_color
comment e892 r/w monocolor/color setting D0 (MP-1710)
label   e892 io_color_setting
comment ee00 read for stop tape
label   ee00 io_stop_tape
comment ee00 read for start tape
label   ee20 io_start_tape
comment ee40 write for display reverse 00:normal ff:reverse
label   ee40 io_display_reverse
comment ee80 D0:tape I/O
comment ee80 D1-D5:ADC
label   ee80 io_dac_and_tape
comment eec0 when write to io_keyboard, do inhibit($00)/allow($F0) NMI mask.
comment eec0 write D3-0 to drive E1-E13 line (keyboard line left to right)
comment eec0 read shift key: F9:NMI F8:KANA(D7),F7:KANA symbol(D6),F6:Alpha symbol(D5),F5:alpha(D4)
comment eec0 (shift key: 0:press, 1:release, ex. $EF=press alnum shift key )
comment eec0 read D3-0 for key code
label eec0 io_keyboard
label ef00 io_timer
label ef40 io_trace
label ef80 io_clear_NMI
comment efe0 screen mode D7-6,D3-2. MB-6885 only
label efe0 io_screen_mode
#
label f000 jmp_mon_start
label f003 ADDIXB
comment f009 block transfer from (003b,003c)-(003d,003e) to (003f,0040)
label f009 MOVBLK
label f00c jmp_sound
comment f00d fetch keyboard. when key pressed, return CARRY=1
label f00f KBIN
label f012 CHRGET
comment f015 display 1 char. 01-0f are control code. when char is control code, return CARRY=1
label f015 CHROUT
label f018 LOAD
label f01b SAVE
comment f023 monitor jump table, char and address
label f023 mon_command_table
data f023-f04a
word f024
word f027
word f02a
word f02d
word f030
word f033
word f036
word f039
word f03c
word f03f
word f042
word f045
word f048
word f04b
#
comment f04d timer count from IRQ
#
lcomment f050 is 1/60s timer interrupt?
comment f059 incremnt 1/60s timer
dec f05d
#
lcomment f07a inhibit NMI
label f096 mon_Step
comment f0d0 from_break_vec
comment f0e4 recover break point SWI to original instruction
label f0e4 recover_break_point
lcomment f0e8 no break point
lcomment f0ff inhibit NMI
comment f14d zero page jump table setup
lcomment f15f inhibit NMI
comment f17f find the amount of RAM installed, every 256bytes.
comment f199 IX=IX+AccB
label f199 mon_ADDIXB
comment f1af escape command (go to basic)
label f1af mon_Escape
comment f1c9 monitor main routine (start with initialize)
label f1c9 mon_Start
comment f1da Waiting for monitor input
label f1da mon_wait_for_input
comment f1fd invalid monitor command
label f201 mon_KBIN_prompt_echo
label f203 jASCOUT_1
comment f206 get a char with asterisk cursor *
label f206 KBIN_with_asterisk
comment f20e message output from IX, 04 terminate.
label f20e mon_MESOUT
label f215 HEX4OUT_from_IX_with_space
label f217 HEX2OUT_from_IX_with_space
comment f21d hex output byte data from IX
label f21d HEX2OUT_from_IX
label f226 HEXOUT_top_A
label f22a HEXOUT_bottom_A
label f236 CHROUT_CR
lcomment f238 jump to ASCOUT
label f238 jASCOUT_2
comment f23a hex out IX reg.
label f23a HEX4OUT_IX
comment f244 output question mark and bell.
label f244 out_question_mark
label f248 bell
label f255 INHEX4
label f256 INHEX2
char  f2ab
lcomment f2ae ascii 0-9 ?
dec   f2af
lcomment f2b2 <A ?
lcomment f2b6 >Z ?
lcomment f2ba convert from A-F to 10-15
comment f2ef AccA = ((IX)<<4)+(IX+1), IX+=2
label f2ff mon_Break
lcomment f354 end of break point?
label f366 jMESOUT_1
label f369 jCHROUT_CR_1
label f36c mon_J_start_tape
comment f372 display cr and space hypthen space
label f372 CR_SP_hyphen_SP
comment f374 display space hypthen space
label f374 SP_hyphen_SP
comment f374 display space colon space
label f37e SP_colon_SP
label f388 mon_Display
label f3ac HEX4IN_ADRTOP
comment f3ac HEX4IN to (IX)
label f3af HEX4IN_FROM
label f3c1 HEX4IN_ADREND
label f3cb mon_Memory
label f3f2 mon_Register
label f40f jHEX4OUT_from_IX_with_space
label f412 jHEX2OUT_from_IX_with_space
label f45e load_breakpoint
comment f45e IX=top address of breakpoint,AccB=number of breakpoint
lcomment f461 load number of breakpoint
comment f464 IX=IX+7, AccB--
label f464 INCX7_DECB1
comment f465 IX=IX+6, AccB--
label f465 INCX6_DECB1
comment f468 IX=IX+3, AccB--
label f468 INCX3_DECB1
comment f46d IX=IX-7, AccB--
label f46d DECX7_DECB1
label f4b0 mon_Transfer
label f476 mon_Go
label f4ad jmon_MESOUT
comment f08c set break point SWI
label f08c set_break_point
comment f497 set SWI to each break point
comment f49e save original instruction
label f4ee mon_Fill
label f51d sound_Bell
label f531 sound_2400Hz
label f545 sound_1200Hz
label f57e sound_delay1
label f586 sound_delay2
label f565 sound_delay3
label f588 sleep AccA
label f593 tape_1byte_out
label f5c4 tape_1byte_out_sub
comment f60e tape save command (Punch)
label f60e mon_Punch
comment mon_BYTOUT from BYTOUT
label f619 mon_BYTOUT
comment f62b copy filename from FNAME to FNAME2
comment f677 allow NMI
label f677 mom_NMICLR
comment f684 inhibit NMI
label f684 mom_NMISET
label f687 get_program_name
label f6b8 print_FNAME2
comment f6cc tape Load command
label f6cc mon_Load
comment f6cf tape Verify command
label f6cf mon_Verify
comment f71f mon_BYTIN from BYTIN
label f71f mon_BYTIN
label f762 tape_1byte_in
comment f7ab output 1byte to screen
label f7ab mon_CHROUT
comment CHR00
label f7da mon_CHROUT_NOP
comment f7db execute control code.
label f7db mon_CHROUT_control_code
lcomment f7e7 fetch char to put from stack
lcomment f7e9 DEL?
lcomment f7ed if DEL then lookup CHR10 adrs
word f7fa-f81b
comment f7fa control code jump table
lcomment f7fa CHR00
lcomment f7fc CHR01
lcomment f7fe CHR02
lcomment f800 CHR03
lcomment f802 CHR04
lcomment f804 CHR05
lcomment f806 CHR06
lcomment f808 CHR07
lcomment f80a CHR08
lcomment f80c CHR09
lcomment f80e CHR0A
lcomment f810 CHR0B
lcomment f812 CHR0C
lcomment f814 CHR0D
lcomment f816 CHR0E
lcomment f818 CHR0F
lcomment f81a CHR7F
comment f81c Sets a flag to display graphic characters (00-0f) instead of executing control code.
label f81c set_graphics_char_mode
comment f820 blink cursor
label f820 blink_cursor
comment f824 erase cursor
label f824 erase_cursor
label f872 scroll_up
label f8b4 scroll_down
comment f829 clear cursor position (X,Y)=(0,0)
label f829 clear_cursor_position
label f830 move_cursor_left_and_del
label f83a move_cursor_left
label f848 move_cursor_right
label f854 move_cursor_up
dec f85a
comment f860 move cursor down, if scroll needed set Z=1
label f860 move_cursor_down
label f86b CR_carriage_return
dec f865
comment f891 clear bottom row
lcomment f891 set CURSOR=(0,23)
const f892-f893
label f899 mon_clear_a_line
dec   f89a
label f8a4 mon_CLRTV
label f8d3 normal_display
label f8d7 reverse_display
label f8dd mon_MOVBLK
comment f8ea copy start from top address or end address
#
comment f95c monitor message string, which string is 04 terminate.
char f95c-fa53
label f95c mSTEP
data  f95e-f966
label f968 mBREAK
data  f969-f96f
label f971 mSWI
data  f972-f976
label f978 mMONITOR_start
data  f979-f98e
label f990 mINPUT_COMMAND
data  f992-f9a3
label f9a5 mBREAK_POINT
data f9a7-f9b3
label f9b5 mHyphen
data  f9b5-f9b7
label f9b9 mDISPLAY
data  f9bb-f9c9
label f9c5 mFROM
data  f9c5-f9c9
label f9cb mCRx3_INPUT_ADDR_AND_DATA
label f9cd mINPUT_ADDR_AND_DATA
data  f9ce-f9de
label f9db mDATA
label f9e0 mColon
data  f9e0-f9e2
label f9e4 mregister
data  f9e5-f9fd
label f9ff mSPx3
label fa03 mSTART_ADDR
data  fa04-fa11
label fa13 mTO
data  fa14-fa19
label fa1a mMASTER_BLOACK_ADDR
data  fa1b-fa2b
label fa22 mBLOCK_ADDR
label fa2e mTRANSFER
data  fa2f-fa36
label fa39 mASTERISK_ERROR
label fa3a mERROR
data  fa3a-fa40
label fa43 mPROGRAM_NAME
data  fa43-fa53
comment fa55 get a char from keyboard. display AccA as cursor
comment fa55 work M0069 char on cursor pos. 0:cursor, 1:original char.
label fa55 mon_CHRGET
comment faa3 calculate cursor address from CURX,CURY
comment faa3 addr = $100 + (CURY<<5) + CURX
comment faa3 addr high = $1 + (CURY>>3)
comment faa3 addr low  = (CURY<<5) + CURX
label faa3 mon_CURPOS
comment fabc +$0100 for VRAM start address
comment fac6 get a char from keyboard.
label fac6 mon_KBIN
comment face kana key pressed?
comment fad8 alpha key pressed?
comment faf9 set NMI status from $0013
comment fb12 main keyboard size is 4x13
dec fb13
comment fb22 main keyboard size is 4x13
dec fb23
comment fb2e shift key pressed?
comment fb51 shift key pressed
comment fb51 alpha symbol shift?
comment fb90 keyboard map (KANA)
label fb90 keymap_kana
data  fb90-fbc3
label fbc4 keymap_alnum
comment fbc4 keyboard map (JIS alpha numeric)
data  fbc4-fbf7
comment fbf8 shift keymap table. keycode,ASCII
label fbf8 keymap_shift_alnum
word  fbf8-fc25
comment fc26 KANA shift keymap table?
label fc26 keymap_shift_kana
word  fc26-fc49
lcomment fc6b set music on (00:rest)
label   fc78 M_next
comment fc87 M:transposition
comment fc8f sharp
comment fc96 B:flat
comment fc9d U:raise one octave
comment fcab D:lower one octave
comment fcb9 check DEFGABC
comment fce5 R:rest
comment fcf0 P:length of sound 0-9
comment fcfe Q:tone 0-4
comment fd0c AccA=(IX++)-$30, if AccA<0 return to higher level caller
label fd0c M_get_num
comment fd15 V:volume 1-5
comment fd25 T:tempo 1-7
#
label fc4a sound
#
word fea3-ffe2
#
comment ffe6 inhibit NMI
label ffe6 NMISET
comment ffe9 allow NMI
label ffe9 NMICLR
comment ffec display IX in hex
label ffec OUTIX
comment ffef clear TV, cursor set 0,0
label ffef CLRTV
comment FFF2 display message from (IX), terminate with 04
label fff2 MESOUT
comment fff5 get current cursor address into IX
label fff5 CURPOS
